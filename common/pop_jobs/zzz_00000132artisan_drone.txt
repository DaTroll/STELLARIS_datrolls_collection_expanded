artisan_drone = {
    category = complex_drone
    condition_string = DRONE_JOB_TRIGGER
    building_icon = building_organic_sanctuary
    possible_pre_triggers = {
        has_owner = yes
        is_enslaved = no
        is_being_purged = no
        is_being_assimilated = no
        is_sapient = yes
    }
    possible_precalc = can_fill_drone_job
    possible = {
        can_think = yes
    }
    resources = {
        category = planet_artisans
        produces = {
            consumer_goods = 10
        }
        upkeep = {
            minerals = 10
        }
        produces = {
            trigger = {
                planet = {
                    has_planet_flag = has_produce_requisitorium
                    exists = owner.overlord
                    owner.overlord = {
                        is_gestalt = no
                    }
                }
            }
            consumer_goods = @requisitorium_consumer_goods_reduction
        }
    }
    overlord_resources = {
        category = planet_requisitioned_consumer_goods
        produces = {
            trigger = {
                planet = {
                    has_planet_flag = has_produce_requisitorium
                    exists = owner.overlord
                    owner.overlord = {
                        is_gestalt = no
                    }
                }
            }
            consumer_goods = @requisitorium_consumer_goods_overlord
        }
    }
    weight = {
        weight = @complex_drone_job_weight
        mult = value:job_weights_modifier|JOB|artisan_drone|RESOURCE|consumer_goods|
        modifier = {
            factor = 0.9
            exists = owner
            years_passed < 1
            owner = {
                has_valid_civic = civic_machine_assimilator
            }
            has_trait = trait_cybernetic
        }
        modifier = {
            factor = 2
            OR = {
                has_job = artisan_drone
                AND = {
                    exists = owner
                    owner = {
                        has_deficit = consumer_goods
                    }
                }
            }
        }
    }
}
